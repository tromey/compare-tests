#! /bin/bash

# Standard build.
# Run in the general vicinity of a gcc/devo tree.

here=
src=

if test "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = true; then
    cd $(git rev-parse --show-toplevel)/..
fi

target=
extra=
configure=configure
compileflag='-g3 -O0'
flags=
for d in binutils-gdb gcc; do
   if test -d $d; then
      here=$(pwd)
      src=$d
      case $d in
       trunk | gcc*)
	  extra="--disable-static --disable-bootstrap"
	  # Painful, but we need to.
	  # target=bootstrap
	  ;;
       binutils-gdb)
	   extra='--enable-targets=all --disable-binutils --disable-gas --disable-gold --disable-gprof --disable-ld --with-separate-debug-dir=/usr/lib/debug/'
	   ;;
      esac
      break
   fi
done

if test -z "$here"; then
   echo "Couldn't find source tree" 1>&2
   exit 1
fi

jflag="-j$(grep -c ^processor /proc/cpuinfo)"
confargs=
for a in ${1+"$@"}; do
   case "$a" in
    --*)
       confargs="$confargs $a"
       ;;
    -O*)
       compileflag="$compileflag $a"
       ;;
    -pg)
       compileflag="$compileflag -pg"
       ;;
    -j*)
       jflag="$a"
       ;;
    *=*)
       eval "export \"$a\""
       ;;
    *)
       confargs="$confargs $a"
       ;;
   esac
done

flags="$flags $jflag"

if test -n "$compileflag"; then
    compileflag='-g -O2'
fi

echo "Using root at $here -> $src"
cd $here

test -f StdEnv && . StdEnv

mkdir build install 2> /dev/null

cd build

( # Wrapper shell to catch error status.
echo 0 > Status

(set -e

# ,xlib
../$src/$configure --prefix=$(cd ../install && pwd) \
   CFLAGS="$compileflag" CPPFLAGS="$compileflag" \
   CXXFLAGS="$compileflag" \
   $confargs \
   $extra

eval make $flags $target

eval make install) 2>&1

echo $? > Status) | tee Log.Std

exit `cat Status`
